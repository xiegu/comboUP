sale_brand <- subset(sale, (category == c) & (brand == i))
ch <- character()
for (j in sale_brand$name){
ch <- append(ch, wk[j][-(1:2)])
}
name_seg[[c]] <- list(i = ch)
}
}
return(name_seg)
}else{
stop('Check "by" argument:')
}
}
aa=hot_sale_name_seg('category')
aa=hot_sale_name_seg('brand')
aa$mobile
aa$air
hot_sale_name_seg <- function(by = c('category', 'brand')){
if(by =='category'){
category <- unique(sale$category)
name_seg <- list()
for (i in category){
sale_cat <- subset(sale, category == i)
ch <- character()
for (j in sale_cat$name){
ch <- append(ch, wk[j][-(1:2)])
}
name_seg[[i]] <- ch
}
return(name_seg)
}else if(by == 'brand'){
category <- unique(sale$category)
brand <- unique(sale$brand)
name_seg <- list()
for (c in category){
name_seg2 <- list
for (i in brand){
sale_brand <- subset(sale, (category == c) & (brand == i))
ch <- character()
for (j in sale_brand$name){
ch <- append(ch, wk[j][-(1:2)])
}
name_seg2[[i]] <- ch
}
name_seg[[c]] <- name_seg2
}
return(name_seg)
}else{
stop('Check "by" argument:')
}
}
aa = hot_sale_name_seg('brand')
hot_sale_name_seg <- function(by = c('category', 'brand')){
if(by =='category'){
category <- unique(sale$category)
name_seg <- list()
for (i in category){
sale_cat <- subset(sale, category == i)
ch <- character()
for (j in sale_cat$name){
ch <- append(ch, wk[j][-(1:2)])
}
name_seg[[i]] <- ch
}
return(name_seg)
}else if(by == 'brand'){
category <- unique(sale$category)
brand <- unique(sale$brand)
name_seg <- list()
for (c in category){
name_seg2 <- list()
for (i in brand){
sale_brand <- subset(sale, (category == c) & (brand == i))
ch <- character()
for (j in sale_brand$name){
ch <- append(ch, wk[j][-(1:2)])
}
name_seg2[[i]] <- ch
}
name_seg[[c]] <- name_seg2
}
return(name_seg)
}else{
stop('Check "by" argument:')
}
}
aa = hot_sale_name_seg('brand')
aa$mobile
hot_sale_name_seg <- function(by = c('category', 'brand')){
if(by =='category'){
category <- unique(sale$category)
name_seg <- list()
for (i in category){
sale_cat <- subset(sale, category == i)
ch <- character()
for (j in sale_cat$name){
ch <- append(ch, wk[j][-(1:2)])
}
name_seg[[i]] <- ch
}
return(name_seg)
}else if(by == 'brand'){
category <- unique(sale$category)
name_seg <- list()
for (c in category){
name_seg2 <- list()
brand <- unique(subset(sale, category == c)$brand)
for (i in brand){
sale_brand <- subset(sale, (category == c) & (brand == i))
ch <- character()
for (j in sale_brand$name){
ch <- append(ch, wk[j][-(1:2)])
}
name_seg2[[i]] <- ch
}
name_seg[[c]] <- name_seg2
}
return(name_seg)
}else{
stop('Check "by" argument:')
}
}
aa= hot_sale_name_seg('brand')
aa$mobile
aa$ref
attributes(aa)
attributes(aa$mobile)
sale
hot_sale_cat_key <- hot_sale_name_seg('category')
hot_sale_cat_key$mobile
install.packages('wordcloud2')
install.packages('wordcloud2')
library(dplyr)
library(jiebaR)
library(shiny)
library(DT)
# Load demo data
load('data.RData')
setwd("~/R_code/comboUp")
library(dplyr)
library(jiebaR)
library(shiny)
library(DT)
# Load demo data
load('data.RData')
?rm
ls()
which(ls() == c('score_full', 'com'))
rm(ls()[-c(2,87)])
ls()[-c(2,87)]
rm(list = ls()[-c(2,87)])
haier_score <- filter(score_full, brand == '海尔')
haier_p <- filter(com, brand == '海尔') %>% select(id, p)
haier_data <- inner_join(haier_score, haier_p, by = c('id' = 'id')) %>% unique
# Text mining on product name
stop_words <- list(
'ref' = c('冰箱', '升', 'BCD', '京东', '电冰箱'),
'air' = c('柜机',  '空调', 'KFR', 'GW', '匹' , '挂机', '壁挂式', '京东'),
'wash' = c('洗', '洗衣机', '公斤', '京东'),
'tv' = c('电视机', '电视', '英寸', '京东'),
'gas' =c('燃气灶', 'JZY', 'JZT', '煤气灶',  '京东'),
'hood' = c('油烟机', '吸油烟机', '抽油烟机',  '安装', 'CXW', '京东'),
'dish' = c('洗碗机' , '套', '京东')
)
wk <- worker()
name_seg <- lapply(haier_data$name, function(x) wk[x]) %>% lapply(., function(x) x[-grep("([A-Z]|[0-9]|[a-z]|海尔)", x)])
# Summarize hot tag in each category
hot_tag <- function(category = 'ref'){
index <- which(haier_data$category == category)
tag <- name_seg[index] %>% unlist %>% table
tag_df <- data.frame(tag = names(tag), count = as.numeric(tag)) %>% filter(., !tag %in% stop_words[[category]]) %>% arrange(., -count)
return(tag_df)
}
ref_tag <- hot_tag('ref')
air_tag <- hot_tag('air')
wash_tag <- hot_tag('wash')
tv_tag <- hot_tag('tv')
hood_tag <- hot_tag('hood')
dish_tag <- hot_tag('dish')
gas_tag <- hot_tag('gas')
ref_hot_tag <- head(ref_tag, 20)
air_hot_tag <- head(air_tag, 40)
wash_hot_tag <- head(wash_tag, 20)
tv_hot_tag <- head(tv_tag, 30)
hood_hot_tag <- head(hood_tag, 40)
dish_hot_tag <- head(dish_tag, 20)
gas_hot_tag <- head(gas_tag, 20)
# Configration
#layout <- data.frame(living = 1, room = 3)
#range <- 0.1 # +-10%
#air_no <- layout$living + layout$room #max
sub_brand <- c('统帅', '卡萨帝')
categories <- unique(haier_data$category)
#-----------------------------------------
ui <- fluidPage(
fluidRow(
column(width =4,
wellPanel(
sliderInput('Bed', 'bed', min = 1, max =4 , value = 2),
sliderInput('Living', 'living', min =1, max =4, value  = 1),
sliderInput('Budget', 'budget', min = 20000, max = 100000, step = 5000, value = 20000),
sliderInput('Range', '+/-', min = 0.05, max = 0.2, step = 0.05, value = 0.1),
selectizeInput('Combo', 'combo', choices = categories, selected = c('ref', 'air', 'wash', 'hood', 'gas'), multiple = TRUE,options = list(
placeholder = 'Please select at least 2 categories')),
checkboxInput('Brand', 'brand?', FALSE),
radioButtons('Preference', 'preference', choices = c('Hot sales' = 'sale', 'Customer favorite' = 'like'), selected = 'sale'),
submitButton("Submit")
)
),
column(width = 6,
wellPanel(
uiOutput('tagPicker')
)
)
),
hr(),
fluidRow(
column(width =8,
dataTableOutput('ComboOutput')
))
# hr(),
# fluidRow(
#     uiOutput('productTable')
#
# )
)
server <- function(input, output, session){
multiAndGrep <- function(patterns, x){
n <- 0
for(i in patterns){
y <- grepl(i, x)
n <- n + y
}
if(n > 0 & n == length(patterns)){
return(1)
}else(return(0))
}
tableFilter <- function(category = 'ref', tag){
dt <- filter(haier_data, category == category) %>% mutate(match = sapply(name, function(x) multiAndGrep(tag, x))) %>% filter(match == 1) %>% select(-match)
if(input$Preference == 'sale'){
dt <- arrange(dt, -comment_count)
}else if(input$Preference == 'like'){
dt <- arrange(dt, -score)
}else{dt <- dt}
if(isTRUE(input$Brand)){
dt2 <- filter(dt, grepl(paste(sub_brand, collapse = '|'), name))
}else{
dt2 <- dt
}
if(nrow(dt2) == 0){
dt <- dt
}else{
dt <- dt2
}
dt <- select(dt, name, p)
}
output$tagPicker <- renderUI({
ui <- list(
ref = selectizeInput('RefTag', 'fridge tags', multiple = TRUE, choices = ref_hot_tag$tag, selected = head(ref_hot_tag$tag,3), options =list(maxItems = 5)),
air = selectizeInput('AirTag', 'aircon tags', multiple = TRUE, choices = air_hot_tag$tag, selected = head(air_hot_tag$tag,3), options =list(maxItems = 5)),
wash= selectizeInput('WashTag', 'wash tags', multiple = TRUE, choices = wash_hot_tag$tag, selected = head(wash_hot_tag$tag,3), options =list(maxItems = 5)),
tv = selectizeInput('TVTag', 'tv tags', multiple = TRUE, choices = tv_hot_tag$tag, selected = head(tv_hot_tag$tag,3), options =list(maxItems = 5)),
hood = selectizeInput('HoodTag', 'hood tags', multiple = TRUE, choices = hood_hot_tag$tag, selected = head(hood_hot_tag$tag,3), options =list(maxItems = 5)),
gas = selectizeInput('GasTag', 'gas tags', multiple = TRUE, choices = gas_hot_tag$tag, selected = head(gas_hot_tag$tag,3), options =list(maxItems = 5)),
dish = selectizeInput('DishTag', 'dish tags', multiple = TRUE, choices = dish_hot_tag$tag, selected = head(dish_hot_tag$tag,3), options =list(maxItems = 5))
)
tagList(ui[input$Combo]
)
})
output$ComboOutput <- renderDataTable({
budget <- input$Budget
range <- input$Range
categories <- input$Combo
tableList <- list(
ref = tableFilter('ref', input$RefTag),
air = tableFilter('air', input$AirTag),
wash = tableFilter('wash', input$WashTag),
tv = tableFilter('tv', input$TVTag),
hood = tableFilter('hood', input$HoodTag),
gas = tableFilter('gas', input$GasTag),
dish = tableFilter('dish', input$DishTag)
)
budgetChecker <- function(p){
check <- ifelse(p > budget*(1+range) | p < budget*(1-range), FALSE, TRUE)
check
}
tableSelector <- tableList[categories]
air_no <- input$Bed + input$Living
li <- list()
for(i in categories){
product <- tableSelector[[i]][1,]
li[[i]]<-  product
}
tablei <- do.call(rbind, li)
tablei <-  mutate(tablei, category = rownames(tablei), total = ifelse(category=='air', air_no*p,p))
if(budgetChecker(sum(tablei$total))){
return(tablei)
}else{
l1 <- li
for(i in categories){
indexi <- which(categories ==i)
if(indexi>1){
n <- min(10, nrow(tableSelector[[indexi-1]]))# maximum 10 attempts only
price2ndMax <- sort(head(tableSelector[[indexi-1]]$p, n), decreasing = TRUE)[2]
indexP2ndMax <- which(head(tableSelector[[indexi-1]]$p, n) == price2ndMax)[1]
l1[[indexi-1]] <- tableSelector[[indexi-1]][indexP2ndMax, ]
}
n <- min(10, nrow(tableSelector[[indexi]]))# maximum 10 attempts only
for(j in 2:n){
product <-tableSelector[[i]][j, ]
l1[[i]] <- product
table1 <- do.call(rbind, l1)
table1 <- mutate(table1, category = rownames(table1), total = ifelse(category=='air', air_no*p,p))
if(budgetChecker(sum(table1$total))){
break
}else{next}
}
if(budgetChecker(sum(table1$total))){
break
}else{next}
}
if(budgetChecker(sum(table1$total))){
return(table1)
}else{
l2 <- l1
for(i in categories){
indexi <- which(categories ==i)
ts <- arrange(tableSelector[[i]], -p)
if(indexi>1){
price2ndMax <- sort(tableSelector[[indexi-1]]$p, decreasing = TRUE)[2]
indexP2ndMax <- which(tableSelector[[indexi-1]]$p == price2ndMax)[1]
l2[[indexi-1]] <- tableSelector[[indexi-1]][indexP2ndMax, ]
}
n <- which(ts$p==l1[[i]]$p)[1]
for(j in 1:n){
product <-ts[j, ]
l2[[i]] <- product
table2 <- do.call(rbind, l2)
table2 <- mutate(table2, category = rownames(tablei), total = ifelse(category=='air', air_no*p,p))
if(budgetChecker(sum(table2$total))){
break
}else{next}
}
if(budgetChecker(sum(table2$total))){
break
}else{next}
}
if(budgetChecker(sum(table2$total))){
return(table2)
}else{return(NULL)}
}
}
})
# output$productTable <- renderUI({
#   haier_data <- select(haier_data, id, name, comment_count, good_count, score, p)
#
#
#   ui <- list(
#     ref = wellPanel(datatable(tableFilter('ref', input$RefTag),rownames = FALSE)),
#     air = wellPanel(datatable(tableFilter('air', input$AirTag),rownames = FALSE)),
#     wash = wellPanel(datatable(tableFilter('wash', input$WashTag),rownames = FALSE)),
#     tv = wellPanel(datatable(tableFilter('tv', input$TVTag),rownames = FALSE)),
#     hood = wellPanel(datatable(tableFilter('hood', input$HoodTag),rownames = FALSE)),
#     gas = wellPanel(datatable(tableFilter('gas', input$GasTag),rownames = FALSE)),
#     dish = wellPanel(datatable(tableFilter('dish', input$DishTag),rownames = FALSE))
#
#     )
#
#   tagList(ui[input$Combo])
# })
}
shinyApp(ui, server)
load('data.RData')
rm(list=ls()[-c(2,87)])
haier_score <- filter(score_full, brand == '海尔')
haier_p <- filter(com, brand == '海尔') %>% select(id, p)
haier_data <- inner_join(haier_score, haier_p, by = c('id' = 'id')) %>% unique
# Text mining on product name
stop_words <- list(
'ref' = c('冰箱', '升', 'BCD', '京东', '电冰箱'),
'air' = c('柜机',  '空调', 'KFR', 'GW', '匹' , '挂机', '壁挂式', '京东'),
'wash' = c('洗', '洗衣机', '公斤', '京东'),
'tv' = c('电视机', '电视', '英寸', '京东'),
'gas' =c('燃气灶', 'JZY', 'JZT', '煤气灶',  '京东'),
'hood' = c('油烟机', '吸油烟机', '抽油烟机',  '安装', 'CXW', '京东'),
'dish' = c('洗碗机' , '套', '京东')
)
wk <- worker()
name_seg <- lapply(haier_data$name, function(x) wk[x]) %>% lapply(., function(x) x[-grep("([A-Z]|[0-9]|[a-z]|海尔)", x)])
# Summarize hot tag in each category
hot_tag <- function(category = 'ref'){
index <- which(haier_data$category == category)
tag <- name_seg[index] %>% unlist %>% table
tag_df <- data.frame(tag = names(tag), count = as.numeric(tag)) %>% filter(., !tag %in% stop_words[[category]]) %>% arrange(., -count)
return(tag_df)
}
ref_tag <- hot_tag('ref')
air_tag <- hot_tag('air')
wash_tag <- hot_tag('wash')
tv_tag <- hot_tag('tv')
hood_tag <- hot_tag('hood')
dish_tag <- hot_tag('dish')
gas_tag <- hot_tag('gas')
ref_hot_tag <- head(ref_tag, 20)
air_hot_tag <- head(air_tag, 40)
wash_hot_tag <- head(wash_tag, 20)
tv_hot_tag <- head(tv_tag, 30)
hood_hot_tag <- head(hood_tag, 40)
dish_hot_tag <- head(dish_tag, 20)
gas_hot_tag <- head(gas_tag, 20)
# Configration
#layout <- data.frame(living = 1, room = 3)
#range <- 0.1 # +-10%
#air_no <- layout$living + layout$room #max
sub_brand <- c('统帅', '卡萨帝')
categories <- unique(haier_data$category)
save.image(file = 'data.RData')
runApp('recommand_combo.R')
?fluidPage
?navbarPage
runApp()
runApp()
runApp()
navbarPage("App Title",
tabPanel("Plot"),
tabPanel("Summary"),
tabPanel("Table")
)
install.packages('shinythemes')
runApp()
?sidebarPanel
runApp()
runApp()
library(shinythemes)
runApp()
?sliderInput
runApp()
runApp()
?dataTableOutput
runApp()
tableFilter <- function(category = 'ref', preference, tag){
dt <- filter(haier_data, category == category) %>% mutate(match = sapply(name, function(x) multiAndGrep(tag, x))) %>% filter(match == 1) %>% select(-match)
if(preference == 'sale'){
dt <- arrange(dt, -comment_count)
}else if(preference == 'like'){
dt <- arrange(dt, -score)
}else{dt <- dt}
if(isTRUE(input$Brand)){
dt2 <- filter(dt, grepl(paste(sub_brand, collapse = '|'), name))
}else{
dt2 <- dt
}
if(nrow(dt2) == 0){
dt <- dt
}else{
dt <- dt2
}
dt <- select(dt, name, p)
}
head(tableFilter('ref', 'sale', '无霜'))
multiAndGrep <- function(patterns, x){
n <- 0
for(i in patterns){
y <- grepl(i, x)
n <- n + y
}
if(n > 0 & n == length(patterns)){
return(1)
}else(return(0))
}
head(tableFilter('ref', 'sale', '无霜'))
input = list()
input$Brand = FALSE
head(tableFilter('ref', 'sale', '无霜'))
head(tableFilter('ref', 'like', '无霜'))
head(tableFilter('air', 'like', '制冷'))
head(tableFilter('air', 'sale', '制冷'))
runApp()
？box
?box
runApp()
?observe
?observeEvent
runApp()
runApp()
brand
runApp()
runApp()
?absolutePanel
runApp()
load('data.RData')
runApp()
runApp()
runApp()
li = list()
li$e = 1
names(li)
runApp()
l1
li
li[[1]]
li[[1]] <- 3
li
names(li)
li[['e']]
runApp()
?actionButton
runApp()
library(shinydashboard)
?box
runApp()
runApp()
