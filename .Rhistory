table2
combo_result2$table1
combo_result2
combo_result3 <- comboModelerNext(categories, tableSelector2, l2, room, floor, budget, range)
combo_result3 <- ifelse(is.null(combo_result2), NULL, comboModelerNext(categories, tableSelector2, l2, room, floor, budget, range))
combo_result2 <- ifelse(is.null(combo_result1), NULL, comboModelerNext(categories, tableSelector, l1, room, floor, budget, range))
combo_result1 <- comboModeler(categories, tableSelector, li, tablei, room, floor, budget, range)
table1 <- combo_result1$table
l1 <- combo_result1$l
L1
l1
combo_result2 <- ifelse(is.null(combo_result1), NULL, comboModelerNext(categories, tableSelector, l1, room, floor, budget, range))
comboModelerNext(categories, tableSelector, l1, room, floor, budget, range)
combo_result1 <- comboModeler(categories, tableSelector, li, tablei, room, floor, budget, range)
table1 <- combo_result1$table
l1 <- combo_result1$l
if(is.null(combo_result1)){
combo_result2 <- NULL
}else{
combo_result2 <- comboModelerNext(categories, tableSelector, l1, room, floor, budget, range)
}
table2 <- combo_result2$table
l2 <- combo_result2$l
tableSelector2 <- combo_result2$tableSelector
combo_result2
if(is.null(combo_result2)){
combo_result3 <- NULL
}else{
combo_result3 <- comboModelerNext(categories, tableSelector2, l2, room, floor, budget, range)
}
table3 <- combo_result3$table
table3
datatable(NULL)
runApp('app2.R')
runApp()
runApp()
runApp()
runApp()
table
tt <- data.frame(1:3, 2:4)
tt
tt[2]
tt[2,]
tt[6,]
source('~/R_code/comboUp/data.R')
load('data.RData')
ref_tag
runApp()
runApp()
source('~/.active-rstudio-document')
tableList$ref
categories
categories = c('ref', 'wash', 'air', 'hood')
if('air' %in% categories){
if(floor == 0){
tableSelector <- tableList[categories]
tableSelector[['wall']] <- tableSelector[['air']]
tableSelector[['air']] <- NULL
}else if(floor == room){
tableSelector <- tableList[categories]
tableSelector[['floor']] <- tableSelector[['air']]
tableSelector[['air']] <- NULL
}else{
tableSelector <- tableList[categories]
tableSelector[['floor']] <- tableSelector[['air']][['floor']]
tableSelector[['wall']] <- tableSelector[['air']][['wall']]
tableSelector[['air']] <- NULL
}
}else{
tableSelector <- tableList[categories]
}
categories <- names(tableSelector)
tableSelector$ref
li <- list()
for(i in categories){
product <- tableSelector[[i]][1,]
li[[i]]<-  product
}
li
tableSelector$floor
source('~/R_code/comboUp/util.R')
tableList <- list(
ref = tableFilter('ref', 'like', brand, reftag),
air = tableFilter('air', 'like', brand, airtag, floor, room),
wash = tableFilter('wash','like', brand, washtag),
tv = tableFilter('tv','like', brand, tvtag),
hood = tableFilter('hood','like', brand, hoodtag),
gas = tableFilter('gas','like', brand, gastag),
dish = tableFilter('dish','like', brand, dishtag)
)
categories
if('air' %in% categories){
if(floor == 0){
tableSelector <- tableList[categories]
tableSelector[['wall']] <- tableSelector[['air']]
tableSelector[['air']] <- NULL
}else if(floor == room){
tableSelector <- tableList[categories]
tableSelector[['floor']] <- tableSelector[['air']]
tableSelector[['air']] <- NULL
}else{
tableSelector <- tableList[categories]
tableSelector[['floor']] <- tableSelector[['air']][['floor']]
tableSelector[['wall']] <- tableSelector[['air']][['wall']]
tableSelector[['air']] <- NULL
}
}else{
tableSelector <- tableList[categories]
}
categories <- names(tableSelector)
li <- list()
for(i in categories){
product <- tableSelector[[i]][1,]
li[[i]]<-  product
}
tablei <- do.call(rbind, li)
tablei
;o
runApp()
tablei
categories
tableList <- list(
ref = tableFilter('ref', 'like', brand, reftag),
air = tableFilter('air', 'like', brand, airtag, floor, room),
wash = tableFilter('wash','like', brand, washtag),
tv = tableFilter('tv','like', brand, tvtag),
hood = tableFilter('hood','like', brand, hoodtag),
gas = tableFilter('gas','like', brand, gastag),
dish = tableFilter('dish','like', brand, dishtag)
)
tableList$air
if('air' %in% categories){
if(floor == 0){
tableSelector <- tableList[categories]
tableSelector[['wall']] <- tableSelector[['air']]
tableSelector[['air']] <- NULL
}else if(floor == room){
tableSelector <- tableList[categories]
tableSelector[['floor']] <- tableSelector[['air']]
tableSelector[['air']] <- NULL
}else{
tableSelector <- tableList[categories]
tableSelector[['floor']] <- tableSelector[['air']][['floor']]
tableSelector[['wall']] <- tableSelector[['air']][['wall']]
tableSelector[['air']] <- NULL
}
}else{
tableSelector <- tableList[categories]
}
tableSelector
tableSelector[['air']]
categories
categories = c('ref', 'wash', 'air', 'hood')
if('air' %in% categories){
if(floor == 0){
tableSelector <- tableList[categories]
tableSelector[['wall']] <- tableSelector[['air']]
tableSelector[['air']] <- NULL
}else if(floor == room){
tableSelector <- tableList[categories]
tableSelector[['floor']] <- tableSelector[['air']]
tableSelector[['air']] <- NULL
}else{
tableSelector <- tableList[categories]
tableSelector[['floor']] <- tableSelector[['air']][['floor']]
tableSelector[['wall']] <- tableSelector[['air']][['wall']]
tableSelector[['air']] <- NULL
}
}else{
tableSelector <- tableList[categories]
}
categories <- names(tableSelector)
categories
li <- list()
for(i in categories){
product <- tableSelector[[i]][1,]
li[[i]]<-  product
}
tablei <- do.call(rbind, li)
tablei <-  mutate(tablei, category = categories, total = ifelse(category=='floor', floor*price, ifelse(category == 'wall', (room - floor)*price, price)))
tableSelector$floor
categories <- names(tableSelector)
li <- list()
for(i in categories){
product <- tableSelector[[i]][1,]
li[[i]]<-  product
}
li
source('~/R_code/comboUp/util.R')
runApp()
ttt
tt <- data.frame(a = 1:3. b = 2:4)
tt <- data.frame(a = 1:3, b = 2:4)
filter(tt, b == max(b))
runApp()
?sapply
patterns = c('a', 'r', 'e')
x = c('cae', cr)
x = c('cae', 'cr')
sapply(patterns, function(i){grepl(i, x)}) %>% sum
x = 'cr'
sapply(patterns, function(i){grepl(i, x)}) %>% sum
runApp()
runApp()
runApp()
?absolutePanel
runApp()
?navbarPage
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
?sidebarPanel
runApp()
textOutput()
?textOutput
runApp()
?renderUI
?reactiveUI
?reactiveValues
?reactiveTable
?reactiveValues
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
?renderUI
runApp('app2.R')
runApp()
runApp('app2.R')
?eventReactive
runApp('app2.R')
a = NULL
a +1
p(a)
nrow(a)
runApp('app2.R')
?eventReactive
?reactive
reactive(aa)
aa
a
aa <- reactive({data.frame(a = 1:3)})
aa
aa()
isolate(aa)
isolate(aa())
aa <- reactive({list(a =data.frame(a = 1:3))})
isolate(aa())
isolate(aa()['a'])
runApp('app2.R')
isolate(aa()['a'])
isolate(aa()[['a']])
runApp('app2.R')
?box
library(shinydashboard)
?box
runApp('app2.R')
?datatable
runApp('app2.R')
?tabsetPanel
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp()
library(markdown)
library(shiny)
?checkboxInput
?textInput
runApp()
runApp()
runApp()
library(shinyjs)
?wellPanel
runApp()
runApp()
?radioButtons
runApp()
?toggle
runApp()
runApp()
?selectizeInput
runApp()
runApp()
runApp()
?arrange
arrange(mtcars, desc(disp))
arrange(mtcars, -disp)
arrange(mtcars, -disp, -hp)
runApp()
shiny::runApp()
runApp()
?radioButtons
runApp()
ui <- fluidPage(
radioButtons("rb", "Choose one:",
choiceNames = list(
icon("calendar"),
HTML("<p style='color:red;'>Red Text</p>"),
"Normal text"
),
choiceValues = list(
"icon", "html", "text"
)),
textOutput("txt")
)
server <- function(input, output) {
output$txt <- renderText({
paste("You chose", input$rb)
})
}
shinyApp(ui, server)
runApp()
?shinytheme
runApp()
ui <- navbarPage('NICE', position = 'fixed-top',
theme = shinytheme("cosmo"),
tabPanel('套餐选择',
tags$head(
includeCSS('www/style.css'),
includeCSS('www/hover.css')
),
fluidRow(
column(width = 3,
wellPanel(
sliderInput('Bed', '卧室', min = 1, max =4 , value = 2),
sliderInput('Living', '客厅', min =1, max =4, value  = 1),
sliderInput('Budget', '预算', min = 20000, max = 100000, step = 5000, value = 20000),
sliderInput('Range', '预算调整幅度+/-', min = 0.05, max = 0.2, step = 0.05, value = 0.1),
selectizeInput('Combo', '家电品类', choices = c('洗衣机' = 'wash',
'空调' = 'air',
'冰箱' = 'ref',
'洗碗机' = 'dish',
'油烟机' = 'hood',
'燃气灶' = 'gas',
'电视' = 'tv'), selected = c('ref', 'air', 'wash', 'hood', 'gas'), multiple = TRUE,options = list(
placeholder = '请至少选择两个家电品类')),
uiOutput('FloorAir'),
checkboxInput('品牌偏好', '卡萨帝', FALSE)
),
actionButton("Submit" ,'提交', class = 'btn-primary', icon = icon('upload'), width = '49%'),
actionButton('Reset', '清除', class = 'btn-info', icon = icon('refresh'),width = '49%')
),
column(width = 3,
wellPanel(
sliderInput('People', '住户人数', min = 1, max = 10, value = 3),
checkboxInput('Old', '是否有老人', FALSE),
radioButtons('Child', '是否有小孩', choices = list('无' = '无', '3岁以下' = '3岁以下', '3岁以上'= '3岁以上'), FALSE),
textInput('Address', '地址', value = '', placeholder = '请填入住宅地址'),
checkboxInput('PM', '根据地址是否选择自清洁/净化pm2.5空调？', FALSE),
textInput('Phone', '联系电话', value = '', placeholder = '请填入联系电话')
),
wellPanel(style = 'background:#dddddd;',
uiOutput('tagPicker')
)
),
column(width = 6,
tabsetPanel(
tabPanel(h2('热卖产品'),
br(),
useShinyjs(),
actionButton('Logic', '套餐选择逻辑', class = 'btn-info'),
wellPanel(id = 'LogicPanel', style = 'background-color: white',
p('根据住房户型、用户预算和所需家电品类，初步筛选目标家电产品'),
p('根据用户输入基本信息，客制化精确筛选目标家电产品：'),
p('地址：', verbatimTextOutput('AddressOut')),
p('住户成员构成：', verbatimTextOutput('Member')),
p('联系电话：', verbatimTextOutput('PhoneOut'))
),
actionButton('bought', '购买记录', class = 'btn-success'),
actionButton('sale1', '套餐一', class = 'hvr-fade-1'),
actionButton('sale2', '套餐二', class = 'hvr-fade-2'),
actionButton('sale3', '套餐三', class = 'hvr-fade-3'),
uiOutput('ComboOutput1')
),
tabPanel(h2('用户最爱'),
br(),
actionButton('favor1', '套餐一', class = 'hvr-fade-1'),
actionButton('favor2', '套餐二', class = 'hvr-fade-2'),
actionButton('favor3', '套餐三', class = 'hvr-fade-3'),
uiOutput('ComboOutput2'),
br()
)
)
)
# hr(),
# fluidRow(
#     uiOutput('productTable')
#
# )
)
),
tabPanel('关于我们',
tags$head(
includeCSS('www/style.css')
),
includeMarkdown('README.md')
)
)
ui
ui$children
library(shinydashboard)
ui <- dashboardBody()
ui$children
ui <- navbarPage('NICE', position = 'fixed-top',
theme = shinytheme("cosmo"),
tabPanel('套餐选择',
tags$head(
includeCSS('www/style.css'),
includeCSS('www/hover.css')
),
fluidRow(
column(width = 3,
wellPanel(
sliderInput('Bed', '卧室', min = 1, max =4 , value = 2),
sliderInput('Living', '客厅', min =1, max =4, value  = 1),
sliderInput('Budget', '预算', min = 20000, max = 100000, step = 5000, value = 20000),
sliderInput('Range', '预算调整幅度+/-', min = 0.05, max = 0.2, step = 0.05, value = 0.1),
selectizeInput('Combo', '家电品类', choices = c('洗衣机' = 'wash',
'空调' = 'air',
'冰箱' = 'ref',
'洗碗机' = 'dish',
'油烟机' = 'hood',
'燃气灶' = 'gas',
'电视' = 'tv'), selected = c('ref', 'air', 'wash', 'hood', 'gas'), multiple = TRUE,options = list(
placeholder = '请至少选择两个家电品类')),
uiOutput('FloorAir'),
checkboxInput('品牌偏好', '卡萨帝', FALSE)
),
actionButton("Submit" ,'提交', class = 'btn-primary', icon = icon('upload'), width = '49%'),
actionButton('Reset', '清除', class = 'btn-info', icon = icon('refresh'),width = '49%')
),
column(width = 3,
wellPanel(
sliderInput('People', '住户人数', min = 1, max = 10, value = 3),
checkboxInput('Old', '是否有老人', FALSE),
radioButtons('Child', '是否有小孩', choices = list('无' = '无', '3岁以下' = '3岁以下', '3岁以上'= '3岁以上'), FALSE),
textInput('Address', '地址', value = '', placeholder = '请填入住宅地址'),
checkboxInput('PM', '根据地址是否选择自清洁/净化pm2.5空调？', FALSE),
textInput('Phone', '联系电话', value = '', placeholder = '请填入联系电话')
),
wellPanel(style = 'background:#dddddd;',
uiOutput('tagPicker')
)
),
column(width = 6,
tabsetPanel(
tabPanel(h2('热卖产品'),
br(),
useShinyjs(),
actionButton('Logic', '套餐选择逻辑', class = 'btn-info'),
wellPanel(id = 'LogicPanel', style = 'background-color: white',
p('根据住房户型、用户预算和所需家电品类，初步筛选目标家电产品'),
p('根据用户输入基本信息，客制化精确筛选目标家电产品：'),
p('地址：', verbatimTextOutput('AddressOut')),
p('住户成员构成：', verbatimTextOutput('Member')),
p('联系电话：', verbatimTextOutput('PhoneOut'))
),
actionButton('bought', '购买记录', class = 'btn-success'),
actionButton('sale1', '套餐一', class = 'hvr-fade-1'),
actionButton('sale2', '套餐二', class = 'hvr-fade-2'),
actionButton('sale3', '套餐三', class = 'hvr-fade-3'),
uiOutput('ComboOutput1')
),
tabPanel(h2('用户最爱'),
br(),
actionButton('favor1', '套餐一', class = 'hvr-fade-1'),
actionButton('favor2', '套餐二', class = 'hvr-fade-2'),
actionButton('favor3', '套餐三', class = 'hvr-fade-3'),
uiOutput('ComboOutput2'),
br()
)
)
)
# hr(),
# fluidRow(
#     uiOutput('productTable')
#
# )
)
),
tabPanel('关于我们',
tags$head(
includeCSS('www/style.css')
),
includeMarkdown('README.md')
)
)
tags$nav()
?tags
runApp()
?shinytheme]
?shinytheme
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?Rprof
?Rprof
getwd()
Rprof("comboup.out",line.profiling=TRUE)
source('~/R_code/comboUp/util.R')
Rprof("comboup.out",line.profiling=TRUE)
budgetChecker(10000, 12000, 0.1)
Rprof(NULL)
summaryRprof("comboup.out",lines = "show")
runApp()
runApp()
setwd("~/R_code/comboUp")
